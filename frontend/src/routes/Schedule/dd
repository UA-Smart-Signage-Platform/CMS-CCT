<div className="relative w-full h-full p-4 bg-gray-50 rounded-lg shadow-md">
    {[].concat(rulesByGroupIdQuery.data.data)
        .sort((a, b) => b.schedule.priority - a.schedule.priority)
        .map((rule, index) => (
            <motion.div
                animate={{ y: index * 96 }}
                key={rule.id}
                className="flex w-full p-4 bg-white rounded-lg shadow-md mb-4"
            >
                <button
                    onClick={() => handleUpdateSingleRule(`${rule.id}`)}
                    className="w-[85%] bg-secondaryLight hover:bg-secondaryDark transition-all duration-200 rounded-l-lg p-4 text-left text-textcolorNotSelected cursor-pointer"
                >
                    <div className="font-semibold text-textcolor">{rule.template.name}</div>
                    <div className="text-sm text-textcolor">
                        Running <span className="font-bold">weekly</span> from{" "}
                        <span className="font-bold">
                            {rule.schedule.startTime[0]}:{rule.schedule.startTime[1]}
                        </span>{" "}
                        to{" "}
                        <span className="font-bold">
                            {rule.schedule.endTime[0]}:{rule.schedule.endTime[1]}
                        </span>{" "}
                        <br />
                        During:{" "}
                        {rule.schedule.weekdays.map((day, index) => (
                            <span key={ALL_WEEKDAYS[day]} className="inline-block">
                                {ALL_WEEKDAYS[day]}
                                {index < rule.schedule.weekdays.length - 1 && <>, </>}
                            </span>
                        ))}
                    </div>
                </button>
                <div className="flex w-[15%] bg-secondaryLight rounded-r-lg items-center justify-center">
                    <div className="flex flex-col space-y-2">
                        <motion.button
                            onClick={() => priorityUp(rule)}
                            whileHover={{ scale: 1.1 }}
                            className="p-2 bg-green-500 hover:bg-green-600 text-white rounded-full shadow-md transition-all duration-200"
                        >
                            <IoMdArrowUp />
                        </motion.button>
                        <motion.button
                            onClick={() => priorityDown(rule)}
                            whileHover={{ scale: 1.1 }}
                            className="p-2 bg-red-500 hover:bg-red-600 text-white rounded-full shadow-md transition-all duration-200"
                        >
                            <IoMdArrowDown />
                        </motion.button>
                    </div>
                    <motion.button
                        onClick={() => deleteRule(rule)}
                        whileHover={{ scale: 1.1 }}
                        className="ml-4 p-2 bg-gray-200 hover:bg-gray-300 text-gray-700 rounded-full shadow-md transition-all duration-200"
                    >
                        <FiTrash2 />
                    </motion.button>
                </div>
            </motion.div>
        ))}
</div>
